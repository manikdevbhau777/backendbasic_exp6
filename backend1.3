const express=require('express');
const mongoose=require('mongoose');
const bodyParser=require('body-parser');
const app=express();
app.use(bodyParser.json());
mongoose.connect('mongodb://127.0.0.1:27017/bankdb',{useNewUrlParser:true,useUnifiedTopology:true});
const accountSchema=new mongoose.Schema({name:String,balance:Number});
const Account=mongoose.model('Account',accountSchema);
app.post('/create',async(req,res)=>{const{name,balance}=req.body;if(!name||balance==null||balance<0)return res.status(400).json({error:'Invalid account details'});const existing=await Account.findOne({name});if(existing)return res.status(400).json({error:'Account already exists'});const acc=new Account({name,balance});await acc.save();res.json({message:'Account created successfully',account:acc});});
app.post('/transfer',async(req,res)=>{const{from,to,amount}=req.body;if(!from||!to||!amount||amount<=0)return res.status(400).json({error:'Invalid transfer details'});const sender=await Account.findOne({name:from});const receiver=await Account.findOne({name:to});if(!sender||!receiver)return res.status(404).json({error:'One or both accounts not found'});if(sender.balance<amount)return res.status(400).json({error:'Insufficient balance'});sender.balance-=amount;receiver.balance+=amount;await sender.save();await receiver.save();res.json({message:'Transfer successful',from:{name:sender.name,balance:sender.balance},to:{name:receiver.name,balance:receiver.balance}});});
app.get('/accounts',async(req,res)=>{const accounts=await Account.find();res.json(accounts);});
app.listen(4000,()=>console.log('Account Transfer API running on port 4000'));
